<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->

<muclient>
<plugin
   name="scan_highlight"
   author="Bast"
   id="aaacbb1cd7dacff665e2a23d"
   language="Lua"
   purpose="highlight gq/cp/quest mobs in scan"
   date_written="2008-10-15 07:35"
   requires="4.30"
   version="2.01"
   >
<description trim="y">
<![CDATA[
]]>
</description>

<!-- 
Algaru's note

I did a bunch of weird stuff to this. I don't recommend you use this.
You should use Bast's plugin directly instead. I am only putting this
here as a backup for myself 
-->

</plugin>

<!-- Aliases -->
<aliases>
	<alias
		name="sscan"
		match="^scn[ ]*(.*)$"
		regexp="y"
		enabled="y"
		sequence="100"
		script="toggle_special_scan"
	>
	</alias>
	<alias
		name="sv"
		match="^sv[ ]*(.*)$"
		regexp="y"
		enabled="y"
		sequence="100"
		script="toggle_special_scan"
	>
	</alias>
	<alias
		name="mobscan"
		match="^msc[ ]*(.*)$"
		regexp="y"
		enabled="y"
		sequence="100"
		script="toggle_special_scan"
	>
	</alias>

</aliases>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   match="^(Not while you are fighting!|You dream about being able to scan\.|You can't scan while resting\.)$"
   script="cancel_special"
   omit_from_output="n"
   name="scan_while_occupied"
   sequence="100"
   regexp="y"
   group="cancel_special"
  />
  <trigger
   enabled="y"
   match="{scan}"
   script="togglescan"
   omit_from_output="y"
   name="scanon"
   sequence="100"
   group="scantag"
  />
  <trigger
   enabled="y"
   match="{/scan}"
   script="togglescan"
   omit_from_output="y"
   name="scanoff"
   sequence="100"
   group="scantag"
  />
  <trigger
   enabled="n"
   script="checkmob"
   match="^     \- (\(.*\))* *(.+)$"
   name="checkmob"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   group="scan"
   />
</triggers>

<!--  Script  -->


<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "pluginhelper"
require 'ldplugin'
require 'colours'

firstrun = false
onquest = false
ongq = false
oncp = false
special_scan = ""

cpmobs = {}
gqmobs = {}
questmob = {}

function toggle_special_scan(name, line, args)
	--print('toggling special scan')
    special_scan = ""
	if name == "sscan" or name == "mobscan" 
    then
        special_scan = name
    elseif name == 'sv'
    then
        special_scan = "sscan"
    end

    phelper:enabletriggroup('cancel_special', true)
    
    if name == 'sv' then
        scancmd = 'survey'
    else
        scancmd = 'scan'
    end
    
	Execute(scancmd .. " " .. args[1])
end

function cancel_special ()
	--print('disabling special scan')
	special_scan = ""
	phelper:enabletriggroup('cancel_special', false)
end

function togglescan(name, line, wildcards)
  if name == 'scanon' then
    --if onquest or ongq or oncp then
    --print('turning on scan matching')
      phelper:enabletriggroup('scan', true)
    --print ('special scan is ' .. special_scan)
    --end
  elseif name == 'scanoff' then
    --print('turning off scan matching')
    phelper:enabletriggroup('scan', false)
	special_scan = ""
  end
end

function checkmob(name, line, wildcards, styles)
  -- If it's a special scan: don't care about players, just mobs
  if string.find(line, '(Player)') and special_scan ~= ""
  then
    return
  end
  
  local found = false
  local mob = wildcards[2]
  mob = mob:lower()
  mob = trim(mob)

  if not found and onquest then
     if mob == questmob.mobname:lower() then
       found = 'quest'
     end
  end

  if not found and ongq then
    for i,v in ipairs(gqmobs) do
      if mob == v.name:lower() then
        found = 'gq'
      end
    end
  end

  if not found and oncp then
    for i,v in ipairs(cpmobs) do
      if mob == v.name:lower() then
        found = 'cp'
      end
    end
  end

  --print('Special scan is '.. tostring(special_scan))
  
  if found then
      local textcolour = RGBColourToName(phelper[tostring(found) .. 'textcolour'])
      local backcolour = RGBColourToName(phelper[tostring(found) .. 'backcolour'])
      for i,v in ipairs(styles) do
        ColourTell(textcolour, backcolour, v.text)
      end
      ColourTell(textcolour, backcolour, ' - (' .. tostring(found):upper() .. ')')
  elseif special_scan ~= "sscan" then
    for i,v in ipairs(styles) do
      --print("printing " .. v.text)
      ColourTell(RGBColourToName(v.textcolour), v.backcolour, v.text)
    end
    ColourNote("", "", "")
  else
	-- print("In the special scan area!")
	-- Don't print anything at all!
  end
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()

      if not firstrun and char.status and tonumber(char.status.state) == 3 then
        firstrun = true
      end

    end
  elseif id == "aaa8a9eda20fa11787c6b438" then
    -- quest stuff
    if msg == 2 then
      -- quest mob info
      onquest = true
      local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438", "quest_info" )

      -- get the timer
      loadstring( pvar )()
      questmob = quest_info
    elseif msg == 4 or msg == 6 or msg == 8 then
      onquest = false
    end
  elseif id == "aaa66f81c50828bbbfda7100" then
    -- cp stuff
    if msg == 3 or msg == 4 then
      oncp = false
    elseif msg == 1 then
      oncp = true
      local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100", "mobs" )

      -- get the mobs
      loadstring( pvar )()
      cpmobs = mobs

    end

  elseif id == "aaa77f81c5408278ccda7100" then
    -- gq stuff
    if msg == 4 or msg == 5 then
      ongq = false
    elseif msg == 3 then
      ongq = true
      local pvar = GetPluginVariable(  "aaa77f81c5408278ccda7100", "mobs" )
      -- get the mobs
      loadstring( pvar )()
      gqmobs = mobs

    end
  end
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")
  ldplugin ("broadcast_quest")
  ldplugin ("broadcast_cp")
  ldplugin ("broadcast_gq")
  SendNoEcho('tags scan on')
  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()
  SendNoEcho('tags scan off')

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState


]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'sch')
phelper:set_default('plugin_colour', 'orange')

phelper:add_setting("cpbackcolour", {help="the background colour for a cp mob", type="colour", default=verify_colour("cyan"), sortlev=1, longname="CP Background colour"})
phelper:add_setting("cptextcolour", {help="the text colour for a cp mob", type="colour", default=verify_colour("black"), sortlev=1, longname="CP Text colour"})
phelper:add_setting("questbackcolour", {help="the background colour for a quest mob", type="colour", default=verify_colour("red"), sortlev=1, longname="Quest Background colour"})
phelper:add_setting("questtextcolour", {help="the text colour for a quest mob", type="colour", default=verify_colour("black"), sortlev=1, longname="Quest Text colour"})
phelper:add_setting("gqbackcolour", {help="the background colour for a gq mob", type="colour", default=verify_colour("magenta"), sortlev=1, longname="GQ Background colour"})
phelper:add_setting("gqtextcolour", {help="the text colour for a gq mob", type="colour", default=verify_colour("black"), sortlev=1, longname="GQ Text colour"})


phelper:enable()

]]>
</script>
</muclient>